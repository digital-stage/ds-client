{"ast":null,"code":"import { Server } from 'socket.io';\n\nconst osc = require('node-osc');\n\nconst ioHandler = (req, res) => {\n  if (!res.socket.server.io) {\n    console.log('*First use, starting socket.io');\n    const oscServer = new osc.Server(9000, '0.0.0.0');\n    const oscClient = new osc.Client('localhost', 9871);\n    const io = new Server(res.socket.server);\n    io.on('connection', socket => {\n      socket.on('config', () => {\n        oscClient.send('/status', `${socket.id} connected`);\n        oscServer.on('message', async msg => {\n          if (msg[0] === '/touchosc/scene') {\n            socket.emit('scene', 'scene');\n          }\n\n          if (msg[0].startsWith('/touchosc/label') && !msg[0].endsWith('/color') && msg[1].length > 1) {\n            socket.emit('newfader', msg[0].substr(15), msg[1]);\n          }\n\n          if (msg[0].startsWith('/touchosc/fader') && !msg[0].endsWith('/color')) {\n            socket.emit('updatefader', msg[0], msg[1]);\n          }\n\n          if (msg[0].startsWith('/touchosc/level')) {\n            socket.emit('updatefader', msg[0], msg[1]);\n          }\n\n          if (msg[0] === '/jackrec/start') socket.emit('jackrecstart', '');\n          if (msg[0] === '/jackrec/stop') socket.emit('jackrecstop', '');\n          if (msg[0] === '/jackrec/portlist') socket.emit('jackrecportlist', '');\n          if (msg[0] === '/jackrec/port') socket.emit('jackrecaddport', msg[1]);\n          if (msg[0] === '/jackrec/filelist') socket.emit('jackrecfilelist', '');\n          if (msg[0] === '/jackrec/file') socket.emit('jackrecaddfile', msg[1]);\n          if (msg[0] === '/jackrec/rectime') socket.emit('jackrectime', msg[1]);\n          if (msg[0] === '/jackrec/error') socket.emit('jackrecerr', msg[1]);\n        });\n        oscClient.send('/touchosc/connect', 16);\n        oscClient.send('/jackrec/listports');\n        oscClient.send('/jackrec/listfiles');\n      });\n      socket.on('message', obj => {\n        oscClient.send(obj);\n      });\n      socket.on('msg', obj => {\n        if (obj.value) {\n          oscClient.send(obj.path, obj.value);\n        } else {\n          oscClient.send(obj.path);\n        }\n      });\n    });\n    res.socket.server.io = io;\n  } else {\n    console.log('socket.io already running');\n  }\n\n  res.end();\n};\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default ioHandler;","map":null,"metadata":{},"sourceType":"module"}