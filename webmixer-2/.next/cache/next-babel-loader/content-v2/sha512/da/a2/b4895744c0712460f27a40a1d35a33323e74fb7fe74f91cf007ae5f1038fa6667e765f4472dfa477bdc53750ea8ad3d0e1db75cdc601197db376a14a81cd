{"ast":null,"code":"import { Server } from 'socket.io';\n\nconst osc = require('node-osc');\n\nconst ioHandler = (req, res) => {\n  if (!res.socket.server.io) {\n    console.log('*First use, starting socket.io');\n    const oscServer = new osc.Server(9000, '0.0.0.0');\n    const oscClient = new osc.Client('localhost', 9871);\n    const io = new Server(res.socket.server);\n    io.on('connection', socket => {\n      socket.on('config', () => {\n        oscClient.send('/status', `${socket.id} connected`);\n        oscServer.on('message', async msg => {\n          console.log(msg);\n\n          if (msg[0] === '/touchosc/scene') {\n            socket.emit('scene', 'scene');\n          }\n\n          if (msg[0].startsWith('/touchosc/label') && !msg[0].endsWith('/color') && msg[1].length > 1) {\n            socket.emit('newfader', msg[0].substr(15), msg[1]);\n          }\n\n          if (msg[0].startsWith('/touchosc/fader') && !msg[0].endsWith('/color')) {\n            socket.emit('updatefader', msg[0], msg[1]);\n          }\n\n          if (msg[0].startsWith('/touchosc/level')) {\n            socket.emit('updatefader', msg[0], msg[1]);\n          }\n\n          if (msg[0] === '/jackrec/start') socket.emit('jackrecstart', '');\n          if (msg[0] === '/jackrec/stop') socket.emit('jackrecstop', '');\n          if (msg[0] === '/jackrec/portlist') socket.emit('jackrecportlist', '');\n          if (msg[0] === '/jackrec/port') socket.emit('jackrecaddport', msg[1]);\n          if (msg[0] === '/jackrec/filelist') socket.emit('jackrecfilelist', '');\n          if (msg[0] === '/jackrec/file') socket.emit('jackrecaddfile', msg[1]);\n          if (msg[0] === '/jackrec/rectime') socket.emit('jackrectime', msg[1]);\n          if (msg[0] === '/jackrec/error') socket.emit('jackrecerr', msg[1]);\n        });\n        oscClient.send('/touchosc/connect', 16);\n        oscClient.send('/jackrec/listports');\n        oscClient.send('/jackrec/listfiles');\n      });\n      socket.on('message', obj => {\n        oscClient.send(obj);\n      });\n      socket.on('msg', obj => {\n        if (obj.value) {\n          oscClient.send(obj.path, obj.value);\n        } else {\n          oscClient.send(obj.path);\n        }\n      });\n    });\n    res.socket.server.io = io;\n  } else {\n    console.log('socket.io already running');\n  }\n\n  res.end();\n};\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default ioHandler;","map":{"version":3,"sources":["/Users/tobias/Developer/digitalstage/ds-client/webmixer/pages/api/socket.ts"],"names":["Server","osc","require","ioHandler","req","res","socket","server","io","console","log","oscServer","oscClient","Client","on","send","id","msg","emit","startsWith","endsWith","length","substr","obj","value","path","end","config","api","bodyParser"],"mappings":"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","sourcesContent":["import {Server} from 'socket.io';\n\nconst osc = require('node-osc');\n\nconst ioHandler = (req, res) => {\n    if (!res.socket.server.io) {\n        console.log('*First use, starting socket.io')\n\n        const oscServer = new osc.Server(9000, '0.0.0.0');\n        const oscClient = new osc.Client('localhost', 9871);\n\n        const io = new Server(res.socket.server)\n\n        io.on('connection', socket => {\n            socket.on('config', () => {\n                oscClient.send('/status', `${socket.id} connected`);\n                oscServer.on('message', async (msg) => {\n                    console.log(msg);\n                    if (msg[0] === '/touchosc/scene') {\n                        socket.emit('scene', 'scene');\n                    }\n                    if (msg[0].startsWith('/touchosc/label') && (!msg[0].endsWith('/color')) && (msg[1].length > 1)) {\n                        socket.emit('newfader', msg[0].substr(15), msg[1]);\n                    }\n                    if (msg[0].startsWith('/touchosc/fader') && (!msg[0].endsWith('/color'))) {\n                        socket.emit('updatefader', msg[0], msg[1]);\n                    }\n                    if (msg[0].startsWith('/touchosc/level')) {\n                        socket.emit('updatefader', msg[0], msg[1]);\n                    }\n                    if (msg[0] === '/jackrec/start')\n                        socket.emit('jackrecstart', '');\n                    if (msg[0] === '/jackrec/stop')\n                        socket.emit('jackrecstop', '');\n                    if (msg[0] === '/jackrec/portlist')\n                        socket.emit('jackrecportlist', '');\n                    if (msg[0] === '/jackrec/port')\n                        socket.emit('jackrecaddport', msg[1]);\n                    if (msg[0] === '/jackrec/filelist')\n                        socket.emit('jackrecfilelist', '');\n                    if (msg[0] === '/jackrec/file')\n                        socket.emit('jackrecaddfile', msg[1]);\n                    if (msg[0] === '/jackrec/rectime')\n                        socket.emit('jackrectime', msg[1]);\n                    if (msg[0] === '/jackrec/error')\n                        socket.emit('jackrecerr', msg[1]);\n\n                });\n                oscClient.send('/touchosc/connect', 16);\n                oscClient.send('/jackrec/listports');\n                oscClient.send('/jackrec/listfiles');\n            });\n            socket.on('message', (obj) => {\n                oscClient.send(obj);\n            });\n            socket.on('msg', (obj) => {\n                if (obj.value) {\n                    oscClient.send(obj.path, obj.value);\n                } else {\n                    oscClient.send(obj.path);\n                }\n            });\n        })\n\n        res.socket.server.io = io\n    } else {\n        console.log('socket.io already running')\n    }\n    res.end()\n}\n\nexport const config = {\n    api: {\n        bodyParser: false\n    }\n}\n\nexport default ioHandler"]},"metadata":{},"sourceType":"module"}